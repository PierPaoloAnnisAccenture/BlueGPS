// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SynapsesSDK
import Combine
import CoreBluetooth
import CoreLocation
import Foundation
import ObjectiveC
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
public protocol DynamicMapViewDelegate : AnyObject {
  func mapViewInitDidComplete(_ operationId: Swift.String)
  func mapViewInitDidFail(_ error: Swift.Error)
  func didReceiveEvent(_ event: SynapsesSDK.MapEvent, payload: Any?)
  func didReceiveError(_ error: Swift.Error)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DynamicMapView : WebKit.WKWebView, WebKit.WKNavigationDelegate, UIKit.UIScrollViewDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) public var delegate: SynapsesSDK.DynamicMapViewDelegate?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor(unsafe) public func load(_ url: Swift.String, additionalHeaders: [Swift.String : Swift.String]? = nil, credentials: SynapsesSDK.SDKCredentialsModel? = nil, configuration: SynapsesSDK.ConfigurationModel? = nil, delegate: SynapsesSDK.DynamicMapViewDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) public func sdkInit(_ userConfiguration: SynapsesSDK.ConfigurationModel? = nil, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func getStyle(_ completionHandler: ((SynapsesSDK.StyleConfigurationModel?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setStyle(_ style: SynapsesSDK.StyleConfigurationModel, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setStartBookingDate(_ date: Swift.String, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func setBookingDate(_ date: Swift.String, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func resetView(_ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func rotate(_ step: Swift.Int, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func rotateAbsolute(_ step: Swift.Int, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func hideRoomLayer(_ hide: Swift.Bool, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func nextFloor(_ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func showTag(_ tagId: Swift.String, follow: Swift.Bool = true, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func getFloor(_ completionHandler: (([SynapsesSDK.FloorModel]?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func getFloors(_ completionHandler: (([SynapsesSDK.FloorModel]?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func getCurrentFloor(_ completionHandler: ((SynapsesSDK.FloorModel?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func gotoFloor(_ floor: SynapsesSDK.FloorModel, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func gotoFromMe(_ position: SynapsesSDK.MapPositionModel, navigationMode: Swift.Bool = false, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func goto(source: SynapsesSDK.MapPositionModel, dest: SynapsesSDK.MapPositionModel, navigationMode: Swift.Bool = false, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func removeNavigation(_ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func loadGenericResource(search: Swift.String?, type: Swift.String?, subtype: Swift.String?, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func selectPoi(poi: SynapsesSDK.GenericResourceModel?, changeFloor: Swift.Bool = true, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func selectPoiById(poi: Swift.Int?, changeFloor: Swift.Bool = true, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func drawPin(position: SynapsesSDK.MapPositionModel?, icon: Swift.String?, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func centerToPosition(position: SynapsesSDK.MapPositionModel, zoom: Swift.Double = 4.0, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func centerToRoom(roomId: Swift.Int, _ callback: ((Swift.String?, Swift.Error?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func unselectRooms()
  @_Concurrency.MainActor(unsafe) public func selectRoom(_ roomID: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func rotatePin(_ degree: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) public func sendPosition(_ latitude: Swift.Double, _ longitude: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func adjustDarkMode(_ darkMode: Swift.Bool)
  @objc deinit
}
@frozen public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension SynapsesSDK.AnyDecodable : SynapsesSDK._AnyDecodable {
}
extension SynapsesSDK._AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension SynapsesSDK.AnyDecodable : Swift.Equatable {
  public static func == (lhs: SynapsesSDK.AnyDecodable, rhs: SynapsesSDK.AnyDecodable) -> Swift.Bool
}
extension SynapsesSDK.AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyDecodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SAInfiniteSpinner : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let circleLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var animationDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open func commonInit()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func updateCircleLayer()
  @_Concurrency.MainActor(unsafe) open func forceBeginRefreshing()
  @_Concurrency.MainActor(unsafe) open func beginRefreshing()
  @_Concurrency.MainActor(unsafe) open func endRefreshing()
  @objc deinit
}
public struct TagVisibilityModel : Swift.Codable {
  public var tagid: Swift.String
  public var visible: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class NavigationStatsModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct VehiclesStats : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ResponseMessage : Swift.Codable {
  public var code: Swift.Int
  public var message: Swift.String?
  public var trace: Swift.String?
  public var payload: SynapsesSDK.AnyCodable?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class PathModel : Swift.Codable {
  public var source: SynapsesSDK.MapPositionModel
  public var dest: SynapsesSDK.MapPositionModel
  public var path: [SynapsesSDK.SubPathModel]
  public var step: [SynapsesSDK.PathStepModel]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class SubPathModel : Swift.Codable {
  public var id: Swift.Int
  public var name: Swift.String
  public var x: Swift.Double
  public var y: Swift.Double
  public var mapId: Swift.Int
  public var mapName: Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class PathStepModel : Swift.Codable {
  public var id: Swift.Int
  public var type: Swift.String
  public var floor: SynapsesSDK.FloorModel
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public static var safeKeyWindow: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var topMostKeyWindow: UIKit.UIWindow? {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var topMostViewController: UIKit.UIViewController? {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var visibleViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isModal: Swift.Bool {
    get
  }
}
public enum MapEventType : Swift.String, Swift.Codable {
  case success
  case goto
  case gotoFromMe
  case error
  case parkConf
  case deskConf
  case bookingResource
  case mapClick
  case navStats
  case navInfo
  case resource
  case tagVisibility
  case roomEnter
  case roomExit
  case floorChange
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MapEvent : Swift.Codable {
  public var type: Swift.String?
  public var key: Swift.String?
  public var payload: Swift.String?
  public var decodedPayload: Any? {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum SynapsesSDKError : Swift.Error {
  case BluetoothDisabled
  public static func == (a: SynapsesSDK.SynapsesSDKError, b: SynapsesSDK.SynapsesSDKError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthenticationStatus {
  case unknown
  case notAuthenticated
  case authenticated
  public static func == (a: SynapsesSDK.AuthenticationStatus, b: SynapsesSDK.AuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BlueGPS : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralManagerDelegate, Foundation.URLSessionDelegate {
  public static let shared: SynapsesSDK.BlueGPS
  public var environment: SynapsesSDK.EnvironmentModel!
  public var authHeaders: (Swift.String, Swift.String)? {
    get
  }
  public var authStatus: SynapsesSDK.AuthenticationStatus {
    get
  }
  public var hasConnectivity: Swift.Bool {
    get
  }
  final public let peripheralManagerStatePublisher: Combine.PassthroughSubject<CoreBluetooth.CBManagerState, Swift.Never>
  public func setupSDK(_ env: SynapsesSDK.EnvironmentModel? = nil, _ callback: ((SynapsesSDK.ResponseMessage) -> Swift.Void)? = nil)
  public func setEnvironment(_ env: SynapsesSDK.EnvironmentModel, _ callback: ((SynapsesSDK.ResponseMessage) -> Swift.Void)? = nil)
  public func setupLoggedUser(username: Swift.String, password: Swift.String, _ callback: ((SynapsesSDK.ResponseMessage) -> Swift.Void)? = nil)
  public func clearLoggedUser()
  public func checkConnection(_ callback: @escaping (SynapsesSDK.ResponseMessage) -> Swift.Void)
  public func initSDK(_ callback: @escaping (SynapsesSDK.ResponseMessage) -> Swift.Void)
  public func login(_ callback: ((SynapsesSDK.ResponseMessage) -> Swift.Void)?)
  public func submitBooking(_ info: SynapsesSDK.MapClickInfoModel, _ callback: @escaping (SynapsesSDK.ResponseMessage) -> Swift.Void)
  public func getConfiguration(_ callback: @escaping (SynapsesSDK.ResponseMessage) -> Swift.Void)
  public func downloadSdkImage(path: Swift.String, publicFlag: Swift.Bool = false, _ callback: ((UIKit.UIImage?, Swift.Error?) -> Swift.Void)?)
  public func findResource(_ search: Swift.String, _ callback: ((SynapsesSDK.ResponseMessage) -> Swift.Void)?)
  public struct DiagnosticCompleteResponse : Swift.Codable {
    public var tagTracking: [Swift.String : Swift.String]?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public typealias DiagnosticCompletionHandler = (SynapsesSDK.BlueGPS.DiagnosticCompleteResponse?) -> Swift.Void
  public typealias DiagnosticTrackingHandler = ([Swift.String : Swift.String]?) -> Swift.Void
  public typealias DiagnosticCheckHandler = (Swift.String?) -> Swift.Void
  public func startDiagnostic(tags: [Swift.String], forgetTagMillis: Swift.Double = 1000, onComplete: @escaping SynapsesSDK.BlueGPS.DiagnosticCompletionHandler, onTagTracking: SynapsesSDK.BlueGPS.DiagnosticTrackingHandler? = nil, onCheck: SynapsesSDK.BlueGPS.DiagnosticCheckHandler? = nil) -> SynapsesSDK.SSEManager?
  public func showToolboxGUI(parameters: SynapsesSDK.ToolboxParametersModel? = nil, _ completionHandler: ((SynapsesSDK.ToolboxParametersModel?) -> Swift.Void)?)
  public func startAdvertisingRegion(with conf: SynapsesSDK.NetworkResponseIOSConfiguration, completion: ((CoreBluetooth.CBPeripheralManager?, Swift.Error?) -> Swift.Void)?)
  public func stopAdvertisingRegion()
  @objc deinit
}
extension SynapsesSDK.BlueGPS {
  @objc dynamic public func peripheralManagerDidUpdateState(_ peripheral: CoreBluetooth.CBPeripheralManager)
  @objc dynamic public func peripheralManagerDidStartAdvertising(_ peripheral: CoreBluetooth.CBPeripheralManager, error: Swift.Error?)
}
public struct NetworkRequestGuestLogin : Swift.Codable {
  public var sdkKey: Swift.String
  public var sdkSecret: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NetworkResponseLogin : Swift.Codable {
  public var headerParam: Swift.String
  public var headerValuePrefix: Swift.String
  public var token: Swift.String
  public var expiryTsMs: Swift.Double
  public var headerValue: Swift.String {
    get
  }
  public var expireDate: Foundation.Date? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@frozen public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension SynapsesSDK.AnyEncodable : SynapsesSDK._AnyEncodable {
}
extension SynapsesSDK._AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension SynapsesSDK.AnyEncodable : Swift.Equatable {
  public static func == (lhs: SynapsesSDK.AnyEncodable, rhs: SynapsesSDK.AnyEncodable) -> Swift.Bool
}
extension SynapsesSDK.AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension SynapsesSDK.AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension SynapsesSDK._AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
extension SynapsesSDK.AnyEncodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EventSourceState {
  case connecting
  case open
  case closed
  public static func == (a: SynapsesSDK.EventSourceState, b: SynapsesSDK.EventSourceState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol EventSourceProtocol {
  var headers: [Swift.String : Swift.String] { get }
  var retryTime: Swift.Int { get }
  var url: Foundation.URL { get }
  var lastEventId: Swift.String? { get }
  var readyState: SynapsesSDK.EventSourceState { get }
  func connect(lastEventId: Swift.String?)
  func disconnect()
  func events() -> [Swift.String]
  func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  func removeEventListener(_ event: Swift.String)
}
@objc open class EventSource : ObjectiveC.NSObject, SynapsesSDK.EventSourceProtocol, Foundation.URLSessionDataDelegate {
  final public let url: Foundation.URL
  public var lastEventId: Swift.String? {
    get
  }
  public var retryTime: Swift.Int {
    get
  }
  public var headers: [Swift.String : Swift.String] {
    get
  }
  public var readyState: SynapsesSDK.EventSourceState {
    get
  }
  public init(url: Foundation.URL, headers: [Swift.String : Swift.String] = [:])
  public init(request: Foundation.URLRequest, headers: [Swift.String : Swift.String] = [:]) throws
  public func connect(lastEventId: Swift.String? = nil)
  public func disconnect()
  public func onOpen(_ onOpenCallback: @escaping (() -> Swift.Void))
  public func onComplete(_ onComplete: @escaping ((Swift.Int?, Swift.Bool?, Foundation.NSError?) -> Swift.Void))
  public func onMessage(_ onMessageCallback: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func addEventListener(_ event: Swift.String, handler: @escaping ((_ id: Swift.String?, _ event: Swift.String?, _ data: Swift.String?) -> Swift.Void))
  public func removeEventListener(_ event: Swift.String)
  public func events() -> [Swift.String]
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc deinit
}
public struct SDKCredentialsModel : Swift.Codable {
  public var sdkCredential: SynapsesSDK.SynapsesCredentialModel?
  public var loggedUser: SynapsesSDK.EnvironmentLoggedUserModel?
  public var microsoftToken: SynapsesSDK.EnvironmentMicrosoftTokenModel?
  public init(sdkCredentials: SynapsesSDK.SynapsesCredentialModel? = nil, loggedUser: SynapsesSDK.EnvironmentLoggedUserModel? = nil, microsoftToken: SynapsesSDK.EnvironmentMicrosoftTokenModel? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ToolboxModel : Swift.Codable {
  public var mapControl: SynapsesSDK.ToolboxParametersModel
  public var layer: SynapsesSDK.ToolboxParametersModel
  public init(mapControl: SynapsesSDK.ToolboxParametersModel? = nil, layer: SynapsesSDK.ToolboxParametersModel? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ToolboxParametersModel : Swift.Codable {
  public enum OrientationType : Swift.String, Swift.CaseIterable, Swift.Codable {
    case horizontal
    case vertical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [SynapsesSDK.ToolboxParametersModel.OrientationType]
    public typealias RawValue = Swift.String
    public static var allCases: [SynapsesSDK.ToolboxParametersModel.OrientationType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var enabled: Swift.Bool
  public var x: Swift.Int
  public var y: Swift.Int
  public var buttonWidth: Swift.Int
  public var buttonHeight: Swift.Int
  public var buttonSpace: Swift.Int
  public var orientation: SynapsesSDK.ToolboxParametersModel.OrientationType
  public var rotationStep: Swift.Int?
  public init(enabled: Swift.Bool = true, x: Swift.Int = 50, y: Swift.Int = 50, buttonWidth: Swift.Int = 40, buttonHeight: Swift.Int = 40, buttonSpace: Swift.Int = 10, orientation: SynapsesSDK.ToolboxParametersModel.OrientationType = .horizontal, rotationStep: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ShowModel : Swift.Codable {
  public var me: Swift.Bool
  public var all: Swift.Bool
  public var room: Swift.Bool
  public var list: [Swift.String]?
  public var kiosk: Swift.Int?
  public var path: Swift.Int?
  public var park: Swift.Bool?
  public var desk: Swift.Bool?
  public init(me: Swift.Bool = true, all: Swift.Bool = false, room: Swift.Bool = true, list: [Swift.String]? = nil, kiosk: Swift.Int? = nil, path: Swift.Int? = nil, park: Swift.Bool = false, desk: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct VisualizationModel : Swift.Codable {
  public var followTagOnClick: Swift.Bool
  public var centerAreaOnClick: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ConfigurationModel : Swift.Codable {
  public var auth: SynapsesSDK.SDKCredentialsModel
  public var style: SynapsesSDK.StyleConfigurationModel
  public var tagid: Swift.String
  public var toolbox: SynapsesSDK.ToolboxModel
  public var show: SynapsesSDK.ShowModel
  public var callbackType: Swift.String
  public var visualization: SynapsesSDK.VisualizationModel
  public var customOption: [Swift.String : Swift.String]?
  public init(auth: SynapsesSDK.SDKCredentialsModel? = nil, tagid: Swift.String? = nil, style: SynapsesSDK.StyleConfigurationModel? = nil, toolbox: SynapsesSDK.ToolboxModel? = nil, show: SynapsesSDK.ShowModel? = nil, callbackType: Swift.String? = nil, visualization: SynapsesSDK.VisualizationModel? = nil, customOption: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StyleConfigurationModel : Swift.Codable {
  public var icons: SynapsesSDK.IconsConfigurationModel
  public var navigation: SynapsesSDK.NavigationConfigurationModel
  public var indication: SynapsesSDK.IndicationConfigurationModel
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IndicationConfigurationModel : Swift.Codable {
  public var stroke: Swift.String?
  public var radiusMeter: Swift.Double?
  public var sourceColor: Swift.String
  public var destColor: Swift.String
  public var opacity: Swift.Double?
  public var iconSource: Swift.String?
  public var iconDestination: Swift.String?
  public var followZoom: Swift.Bool
  public var iconVAlign: Swift.String
  public var iconHAlign: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NavigationConfigurationModel : Swift.Codable {
  public var radiusMeter: Swift.Double?
  public var strokeWidthMeter: Swift.Double
  public var stroke: Swift.String?
  public var strokeOpacity: Swift.Double?
  public var strokeLinecap: Swift.String
  public var strokeLinejoin: Swift.String
  public var jumpColor: Swift.String
  public var jumpOpacity: Swift.Double?
  public var jumpRadiusMeter: Swift.Double
  public var animationTime: Swift.Double
  public var iconSource: Swift.String?
  public var iconDestination: Swift.String?
  public var velocityOptions: [Swift.String : Swift.Double]?
  public var navigationStep: Swift.Double
  public var autoZoom: Swift.Bool
  public var showVoronoy: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IconsConfigurationModel : Swift.Codable {
  public var opacity: Swift.Double?
  public var radiusMeter: Swift.Double?
  public var name: Swift.String
  public var align: Swift.String
  public var vAlign: Swift.String
  public var followZoom: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class IconModel : Swift.Codable {
  public var id: Swift.Int
  public var name: Swift.String?
  public var icon: Swift.String?
  public var iconUrl: Swift.String?
  public var iconPath: Swift.String?
  public var iconBase64: Swift.String?
  public init(id: Swift.Int)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.0, *)
extension Foundation.Scanner {
  public func extractUpTo(_ upto: Swift.String, purgeDelimiter: Swift.Bool = false) -> Swift.String?
  public func extractUpTo(_ upto: Foundation.CharacterSet) -> Swift.String?
}
public class NavigationInfoModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class MapClickResponse : Swift.Codable {
  public var id: Swift.Int
  public var name: Swift.String
  public var x: Swift.Double
  public var y: Swift.Double
  public var info: SynapsesSDK.MapClickInfoModel?
  public var color: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MapClickInfoModel : Swift.Codable {
  public var booking: SynapsesSDK.MapClickInfoBooking?
  public var reservation: [SynapsesSDK.MapClickInfoReservation]?
  public var position: SynapsesSDK.MapPositionModel?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MapClickInfoBooking : Swift.Codable {
  public var resId: Swift.Int?
  public var name: Swift.String?
  public var imageUrl: Swift.String?
  public var editable: Swift.Bool
  public var type: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MapClickInfoReservation : Swift.Codable, Foundation.NSCopying {
  public var index: Swift.Int
  public var date: Swift.String
  public var availableQuantity: Swift.Int?
  public var bookableStatus: SynapsesSDK.ReservationBookableStatus
  public var isEnabled: Swift.Bool {
    get
  }
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum ReservationBookableStatus : Swift.String, Swift.Codable {
  case BOOKABLE
  case BOOKED_BY_ME
  case NOT_AVAILABLE
  case UNBOOKABLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Swift.Array where Element == SynapsesSDK.MapClickInfoReservation {
  public func getReservation(_ index: Swift.Int) -> SynapsesSDK.MapClickInfoReservation?
  public func updateReservationStatus(_ newReservation: SynapsesSDK.MapClickInfoReservation)
  public func isUnchangedFrom(_ reservations: [SynapsesSDK.MapClickInfoReservation]) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class FilterResourceModel : Swift.Codable {
  public var filter: [Swift.String : Swift.String]?
  public var data: [SynapsesSDK.GenericResourceModel]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DiagnosticSSERequest : Swift.Codable {
  public var tagTracking: SynapsesSDK.TrackingSSEModel
  public init(_ tagTracking: SynapsesSDK.TrackingSSEModel)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TrackingSSEModel : Swift.Codable {
  public var forgetTagMillis: Swift.Double
  public var tags: [Swift.String]
  public init(forgetTagMillis: Swift.Double = 1000, tags: [Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias EventListenerCompletionHandler = (Swift.String?, Swift.String?, Swift.String?) -> Swift.Void
@objc public class SSEManager : ObjectiveC.NSObject {
  public init<T>(autoConnect: Swift.Bool = true, request: Foundation.URLRequest, headers: [Swift.String : Swift.String]?, body: T?, events: [Swift.String : SynapsesSDK.EventListenerCompletionHandler]?) throws where T : Swift.Decodable, T : Swift.Encodable
  public init(path: Swift.String, subPath: Swift.String, headers: [Swift.String : Swift.String]?, autoConnect: Swift.Bool = true) throws
  public func addEventListener(_ event: Swift.String, handler: @escaping SynapsesSDK.EventListenerCompletionHandler)
  public func removeEventListener(_ event: Swift.String)
  public func removeAllListenersAndDisconnect()
  @objc deinit
}
@frozen public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension SynapsesSDK.AnyCodable : SynapsesSDK._AnyEncodable, SynapsesSDK._AnyDecodable {
}
extension SynapsesSDK.AnyCodable : Swift.Equatable {
  public static func == (lhs: SynapsesSDK.AnyCodable, rhs: SynapsesSDK.AnyCodable) -> Swift.Bool
}
extension SynapsesSDK.AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension SynapsesSDK.AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension SynapsesSDK.AnyCodable : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnvironmentModel : Swift.Codable {
  public var useValidate: Swift.Bool?
  public var sdkEndpoint: Swift.String
  public var sdkKey: Swift.String?
  public var sdkSecret: Swift.String?
  public var timeout: Swift.Int
  public var sdkToken: Swift.String?
  public var loggedUser: SynapsesSDK.EnvironmentLoggedUserModel?
  public var microsoftToken: SynapsesSDK.EnvironmentMicrosoftTokenModel?
  public var token: Swift.String? {
    get
  }
  public var accessToken: Swift.String? {
    get
  }
  public init(useValidate: Swift.Bool = true, endpoint: Swift.String, key: Swift.String? = nil, secret: Swift.String? = nil, timeout: Swift.Int? = nil, token: Swift.String? = nil, loggedUser: SynapsesSDK.EnvironmentLoggedUserModel? = nil, microsoftToken: SynapsesSDK.EnvironmentMicrosoftTokenModel? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SynapsesSDK.EnvironmentModel {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case sdkEndpoint
    case sdkKey
    case sdkSecret
    case timeout
    case sdkToken
    case loggedUser
    case microsoftToken
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
}
public struct SynapsesCredentialModel : Swift.Codable {
  public var sdkKey: Swift.String
  public var sdkSecret: Swift.String
  public init(sdkKey: Swift.String, sdkSecret: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EnvironmentLoggedUserModel : Swift.Codable {
  public var username: Swift.String?
  public var password: Swift.String?
  public var token: Swift.String?
  public init(username: Swift.String? = nil, password: Swift.String? = nil, token: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EnvironmentMicrosoftTokenModel : Swift.Codable {
  public var idToken: Swift.String
  public var accessToken: Swift.String?
  public init(idToken: Swift.String, accessToken: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class BuildingPositionModel : Swift.Codable {
  public var floorId: Swift.Int
  public var floorName: Swift.String
  public var roomId: Swift.Int
  public var roomName: Swift.String
  public var roomPosition: SynapsesSDK.MapPositionModel?
  public init(floorId: Swift.Int, floorName: Swift.String, roomId: Swift.Int, roomName: Swift.String, roomPosition: SynapsesSDK.MapPositionModel?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class GenericResourceModel : Swift.Codable {
  public var id: Swift.Int
  public var type: Swift.String?
  public var subType: Swift.String?
  public var name: Swift.String?
  public var icon: SynapsesSDK.IconModel?
  public var position: SynapsesSDK.MapPositionModel?
  public var buildingPosition: SynapsesSDK.BuildingPositionModel?
  public init(id: Swift.Int)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (SynapsesSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (SynapsesSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible, Swift.Equatable {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SynapsesSDK.Reachability.NetworkStatus, b: SynapsesSDK.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: SynapsesSDK.Reachability.Connection
    public static func == (a: SynapsesSDK.Reachability.Connection, b: SynapsesSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: SynapsesSDK.Reachability.NetworkReachable?
  public var whenUnreachable: SynapsesSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: SynapsesSDK.Reachability.Connection {
    get
  }
  public var connection: SynapsesSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension SynapsesSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public class MapPositionModel : Swift.Codable {
  public var mapId: Swift.Int
  public var tagid: Swift.String?
  public var roomId: Swift.Int?
  public var areaId: Swift.Int?
  public var x: Swift.Double
  public var y: Swift.Double
  public var data: Swift.String?
  public init(mapId: Swift.Int = 1, tagid: Swift.String? = nil, roomId: Swift.Int? = nil, areaId: Swift.Int? = nil, x: Swift.Double = 0.0, y: Swift.Double = 0.0, data: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct NetworkRequestConfiguration : Swift.Codable {
  public var appId: Swift.String
  public var uuid: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NetworkResponseConfiguration : Swift.Codable {
  public var appId: Swift.String
  public var uuid: Swift.String
  public var pushToken: Swift.String?
  public var iosadvConf: SynapsesSDK.NetworkResponseIOSConfiguration
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NetworkResponseIOSConfiguration : Swift.Codable {
  public var tagid: Swift.String
  public var byte1: Swift.UInt8
  public var byte2: Swift.UInt8
  public var tON: Swift.Double?
  public var tOFF: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class FloorModel : Swift.Codable {
  public var id: Swift.Int
  public var label: Swift.String?
  public var name: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class GenericEventResponse : Swift.Codable {
  public var status: Swift.String?
  public var message: Swift.String?
  public var statusCode: Swift.Int?
  public init(status: Swift.String? = nil, message: Swift.String? = nil, statusCode: Swift.Int? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BookingConfigurationResponse : Swift.Codable {
  public var availableDateList: [Swift.String]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension SynapsesSDK.MapEventType : Swift.Equatable {}
extension SynapsesSDK.MapEventType : Swift.Hashable {}
extension SynapsesSDK.MapEventType : Swift.RawRepresentable {}
extension SynapsesSDK.SynapsesSDKError : Swift.Equatable {}
extension SynapsesSDK.SynapsesSDKError : Swift.Hashable {}
extension SynapsesSDK.AuthenticationStatus : Swift.Equatable {}
extension SynapsesSDK.AuthenticationStatus : Swift.Hashable {}
extension SynapsesSDK.EventSourceState : Swift.Equatable {}
extension SynapsesSDK.EventSourceState : Swift.Hashable {}
extension SynapsesSDK.ToolboxParametersModel.OrientationType : Swift.Equatable {}
extension SynapsesSDK.ToolboxParametersModel.OrientationType : Swift.Hashable {}
extension SynapsesSDK.ToolboxParametersModel.OrientationType : Swift.RawRepresentable {}
extension SynapsesSDK.ReservationBookableStatus : Swift.Equatable {}
extension SynapsesSDK.ReservationBookableStatus : Swift.Hashable {}
extension SynapsesSDK.ReservationBookableStatus : Swift.RawRepresentable {}
extension SynapsesSDK.EnvironmentModel.CodingKeys : Swift.Equatable {}
extension SynapsesSDK.EnvironmentModel.CodingKeys : Swift.Hashable {}
extension SynapsesSDK.EnvironmentModel.CodingKeys : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension SynapsesSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension SynapsesSDK.Reachability.Connection : Swift.Equatable {}
extension SynapsesSDK.Reachability.Connection : Swift.Hashable {}
